version: "2.2"

services:
  django:
    build:
      context: .
      dockerfile: ./configs/django.Dockerfile
    volumes:
      - ./volumes/static:/static
      - ./volumes/media:/media
      - ./volumes/socks:/socks
      - ./volumes/server_logs:/logs
    depends_on:
      - postgres
      - redis
    restart: on-failure
    container_name: ctforces_django
    env_file:
      - ./configs/environment.env
    sysctls:
      - net.core.somaxconn=2048

  celery:
    build:
      context: .
      dockerfile: ./configs/celery.Dockerfile
    volumes:
      - ./volumes/celery:/celery
      - ./volumes/media:/media
    depends_on:
      - rabbitmq
    restart: on-failure
    container_name: ctforces_celery
    env_file:
      - configs/environment.env

  flower:
    build:
      context: .
      dockerfile: configs/flower.Dockerfile
    volumes:
      - ./volumes/celery:/celery
      - ./volumes/media:/media
      - ./volumes/socks:/socks
    depends_on:
      - rabbitmq
      - celery
    restart: on-failure
    container_name: ctforces_flower
    env_file:
      - configs/environment.env

  nginx:
    image: nginx:1.15.9-alpine
    volumes:
      - ./configs/nginx:/etc/nginx/conf.d
      - ./configs/nginx.proxy_params:/etc/nginx/proxy_params
      - ./configs/robots.txt:/var/www/ctforces/robots.txt
      - ./volumes/static:/static:ro
      - ./volumes/socks:/socks
      - ./volumes/media:/media:ro
      - ./volumes/react_build:/react_build:ro
      - ./volumes/certbot/conf:/etc/letsencrypt
      - ./volumes/certbot/www:/var/www/certbot
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    ports:
      - "80:80"
      - "443:443"
    restart: on-failure
    container_name: ctforces_nginx
    sysctls:
      - net.core.somaxconn=2048

  certbot:
    image: certbot/certbot
    volumes:
      - ./volumes/certbot/conf:/etc/letsencrypt
      - ./volumes/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    restart: on-failure
    container_name: ctforces_certbot

  postgres:
    build:
      context: .
      dockerfile: configs/postgres.Dockerfile
    volumes:
      - ./volumes/db/postgresql/data:/var/lib/postgresql/data
    restart: on-failure
    container_name: ctforces_postgres
    env_file:
      - ./configs/environment.env

  redis:
    image: redis:5.0.3-alpine
    container_name: ctforces_redis

  rabbitmq:
    hostname: rabbitmq
    image: rabbitmq:3.7.14-management-alpine
    restart: on-failure
    container_name: ctforces_rabbitmq
    env_file:
      - configs/environment.env

  react_init:
    build:
      context: .
      dockerfile: configs/react.Dockerfile
    volumes:
      - ./volumes/react_build:/react_build
      - - ./volumes/react_cache:/cache
    restart: on-failure
    container_name: ctforces_react_init
    env_file:
      - configs/environment.env
